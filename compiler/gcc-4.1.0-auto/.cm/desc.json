{
  "all_compiler_flags_desc": {
    "##base_opt": {
      "choice": [
        "-O3", 
        "-O0", 
        "-O1", 
        "-O2", 
        "-Os}"
      ], 
      "default": "", 
      "desc": "base compiler flag", 
      "sort": 10000, 
      "tags": [
        "base", 
        "basic", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##bounds-check": {
      "can_omit": "yes", 
      "choice": [
        "-fbounds-check", 
        "-fno-bounds-check"
      ], 
      "default": "", 
      "desc": "compiler flag: -fbounds-check", 
      "sort": 100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##branch-count-reg": {
      "can_omit": "yes", 
      "choice": [
        "-fbranch-count-reg", 
        "-fno-branch-count-reg"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-branch-count-reg", 
      "sort": 4100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##branch-probabilities": {
      "can_omit": "yes", 
      "choice": [
        "-fbranch-probabilities", 
        "-fno-branch-probabilities"
      ], 
      "default": "", 
      "desc": "compiler flag: -fbranch-probabilities", 
      "sort": 500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##branch-target-load-optimize": {
      "can_omit": "yes", 
      "choice": [
        "-fbranch-target-load-optimize", 
        "-fno-branch-target-load-optimize"
      ], 
      "default": "", 
      "desc": "compiler flag: -fbranch-target-load-optimize", 
      "sort": 800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##branch-target-load-optimize2": {
      "can_omit": "yes", 
      "choice": [
        "-fbranch-target-load-optimize2", 
        "-fno-branch-target-load-optimize2"
      ], 
      "default": "", 
      "desc": "compiler flag: -fbranch-target-load-optimize2", 
      "sort": 900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##btr-bb-exclusive": {
      "can_omit": "yes", 
      "choice": [
        "-fbtr-bb-exclusive", 
        "-fno-btr-bb-exclusive"
      ], 
      "default": "", 
      "desc": "compiler flag: -fbtr-bb-exclusive", 
      "sort": 1000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##caller-saves": {
      "can_omit": "yes", 
      "choice": [
        "-fcaller-saves", 
        "-fno-caller-saves"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcaller-saves", 
      "sort": 1100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##cprop-registers": {
      "can_omit": "yes", 
      "choice": [
        "-fcprop-registers", 
        "-fno-cprop-registers"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcprop-registers", 
      "sort": 1200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##crossjumping": {
      "can_omit": "yes", 
      "choice": [
        "-fcrossjumping", 
        "-fno-crossjumping"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcrossjumping", 
      "sort": 3100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##cse-follow-jumps": {
      "can_omit": "yes", 
      "choice": [
        "-fcse-follow-jumps", 
        "-fno-cse-follow-jumps"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcse-follow-jumps", 
      "sort": 1300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##cse-skip-blocks": {
      "can_omit": "yes", 
      "choice": [
        "-fcse-skip-blocks", 
        "-fno-cse-skip-blocks"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcse-skip-blocks", 
      "sort": 1400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##cx-limited-range": {
      "can_omit": "yes", 
      "choice": [
        "-fcx-limited-range", 
        "-fno-cx-limited-range"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcx-limited-range", 
      "sort": 1500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##data-sections": {
      "can_omit": "yes", 
      "choice": [
        "-fdata-sections", 
        "-fno-data-sections"
      ], 
      "default": "", 
      "desc": "compiler flag: -fdata-sections", 
      "sort": 1600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##default-inline": {
      "can_omit": "yes", 
      "choice": [
        "-fdefault-inline", 
        "-fno-default-inline"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-default-inline", 
      "sort": 4200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##defer-pop": {
      "can_omit": "yes", 
      "choice": [
        "-fdefer-pop", 
        "-fno-defer-pop"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-defer-pop", 
      "sort": 4300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##delayed-branch": {
      "can_omit": "yes", 
      "choice": [
        "-fdelayed-branch", 
        "-fno-delayed-branch"
      ], 
      "default": "", 
      "desc": "compiler flag: -fdelayed-branch", 
      "sort": 1700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##delete-null-pointer-checks": {
      "can_omit": "yes", 
      "choice": [
        "-fdelete-null-pointer-checks", 
        "-fno-delete-null-pointer-checks"
      ], 
      "default": "", 
      "desc": "compiler flag: -fdelete-null-pointer-checks", 
      "sort": 1800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##early-inlining": {
      "can_omit": "yes", 
      "choice": [
        "-fearly-inlining", 
        "-fno-early-inlining"
      ], 
      "default": "", 
      "desc": "compiler flag: -fearly-inlining", 
      "sort": 1900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##expensive-optimizations": {
      "can_omit": "yes", 
      "choice": [
        "-fexpensive-optimizations", 
        "-fno-expensive-optimizations"
      ], 
      "default": "", 
      "desc": "compiler flag: -fexpensive-optimizations", 
      "sort": 2000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##fast-math": {
      "can_omit": "yes", 
      "choice": [
        "-ffast-math", 
        "-fno-fast-math"
      ], 
      "default": "", 
      "desc": "compiler flag: -ffast-math", 
      "sort": 2100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##finite-math-only": {
      "can_omit": "yes", 
      "choice": [
        "-ffinite-math-only", 
        "-fno-finite-math-only"
      ], 
      "default": "", 
      "desc": "compiler flag: -ffinite-math-only", 
      "sort": 5400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##float-store": {
      "can_omit": "yes", 
      "choice": [
        "-ffloat-store", 
        "-fno-float-store"
      ], 
      "default": "", 
      "desc": "compiler flag: -ffloat-store", 
      "sort": 2200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##force-addr": {
      "can_omit": "yes", 
      "choice": [
        "-fforce-addr", 
        "-fno-force-addr"
      ], 
      "default": "", 
      "desc": "compiler flag: -fforce-addr", 
      "sort": 2300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##function-cse": {
      "can_omit": "yes", 
      "choice": [
        "-ffunction-cse", 
        "-fno-function-cse"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-function-cse", 
      "sort": 4600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##function-sections": {
      "can_omit": "yes", 
      "choice": [
        "-ffunction-sections", 
        "-fno-function-sections"
      ], 
      "default": "", 
      "desc": "compiler flag: -ffunction-sections", 
      "sort": 2400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##gcse": {
      "can_omit": "yes", 
      "choice": [
        "-fgcse", 
        "-fno-gcse"
      ], 
      "default": "", 
      "desc": "compiler flag: -fgcse", 
      "sort": 2500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##gcse-after-reload": {
      "can_omit": "yes", 
      "choice": [
        "-fgcse-after-reload", 
        "-fno-gcse-after-reload"
      ], 
      "default": "", 
      "desc": "compiler flag: -fgcse-after-reload", 
      "sort": 2900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##gcse-las": {
      "can_omit": "yes", 
      "choice": [
        "-fgcse-las", 
        "-fno-gcse-las"
      ], 
      "default": "", 
      "desc": "compiler flag: -fgcse-las", 
      "sort": 2800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##gcse-lm": {
      "can_omit": "yes", 
      "choice": [
        "-fgcse-lm", 
        "-fno-gcse-lm"
      ], 
      "default": "", 
      "desc": "compiler flag: -fgcse-lm", 
      "sort": 2600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##gcse-sm": {
      "can_omit": "yes", 
      "choice": [
        "-fgcse-sm", 
        "-fno-gcse-sm"
      ], 
      "default": "", 
      "desc": "compiler flag: -fgcse-sm", 
      "sort": 2700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##guess-branch-probability": {
      "can_omit": "yes", 
      "choice": [
        "-fguess-branch-probability", 
        "-fno-guess-branch-probability"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-guess-branch-probability", 
      "sort": 4700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##if-conversion": {
      "can_omit": "yes", 
      "choice": [
        "-fif-conversion", 
        "-fno-if-conversion"
      ], 
      "default": "", 
      "desc": "compiler flag: -fif-conversion", 
      "sort": 3200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##if-conversion2": {
      "can_omit": "yes", 
      "choice": [
        "-fif-conversion2", 
        "-fno-if-conversion2"
      ], 
      "default": "", 
      "desc": "compiler flag: -fif-conversion2", 
      "sort": 3300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##inline": {
      "can_omit": "yes", 
      "choice": [
        "-finline", 
        "-fno-inline"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-inline", 
      "sort": 4800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##inline-functions": {
      "can_omit": "yes", 
      "choice": [
        "-finline-functions", 
        "-fno-inline-functions"
      ], 
      "default": "", 
      "desc": "compiler flag: -finline-functions", 
      "sort": 3400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##inline-functions-called-once": {
      "can_omit": "yes", 
      "choice": [
        "-finline-functions-called-once", 
        "-fno-inline-functions-called-once"
      ], 
      "default": "", 
      "desc": "compiler flag: -finline-functions-called-once", 
      "sort": 3500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##ivopts": {
      "can_omit": "yes", 
      "choice": [
        "-fivopts", 
        "-fno-ivopts"
      ], 
      "default": "", 
      "desc": "compiler flag: -fivopts", 
      "sort": 10100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##keep-inline-functions": {
      "can_omit": "yes", 
      "choice": [
        "-fkeep-inline-functions", 
        "-fno-keep-inline-functions"
      ], 
      "default": "", 
      "desc": "compiler flag: -fkeep-inline-functions", 
      "sort": 3600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##keep-static-consts": {
      "can_omit": "yes", 
      "choice": [
        "-fkeep-static-consts", 
        "-fno-keep-static-consts"
      ], 
      "default": "", 
      "desc": "compiler flag: -fkeep-static-consts", 
      "sort": 3700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##loop-optimize": {
      "can_omit": "yes", 
      "choice": [
        "-floop-optimize", 
        "-fno-loop-optimize"
      ], 
      "default": "", 
      "desc": "compiler flag: -floop-optimize", 
      "sort": 3000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##loop-optimize2": {
      "can_omit": "yes", 
      "choice": [
        "-floop-optimize2", 
        "-fno-loop-optimize2"
      ], 
      "default": "", 
      "desc": "compiler flag: -floop-optimize2", 
      "sort": 4400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##math-errno": {
      "can_omit": "yes", 
      "choice": [
        "-fmath-errno", 
        "-fno-math-errno"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-math-errno", 
      "sort": 4900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##merge-all-constants": {
      "can_omit": "yes", 
      "choice": [
        "-fmerge-all-constants", 
        "-fno-merge-all-constants"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmerge-all-constants", 
      "sort": 3900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##merge-constants": {
      "can_omit": "yes", 
      "choice": [
        "-fmerge-constants", 
        "-fno-merge-constants"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmerge-constants", 
      "sort": 3800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##modulo-sched": {
      "can_omit": "yes", 
      "choice": [
        "-fmodulo-sched", 
        "-fno-modulo-sched"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmodulo-sched", 
      "sort": 4000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##move-loop-invariants": {
      "can_omit": "yes", 
      "choice": [
        "-fmove-loop-invariants", 
        "-fno-move-loop-invariants"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmove-loop-invariants", 
      "sort": 4500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##mudflap": {
      "can_omit": "yes", 
      "choice": [
        "-fmudflap", 
        "-fno-mudflap"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmudflap", 
      "sort": 200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##mudflapir": {
      "can_omit": "yes", 
      "choice": [
        "-fmudflapir", 
        "-fno-mudflapir"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmudflapir", 
      "sort": 400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##mudflapth": {
      "can_omit": "yes", 
      "choice": [
        "-fmudflapth", 
        "-fno-mudflapth"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmudflapth", 
      "sort": 300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##omit-frame-pointer": {
      "can_omit": "yes", 
      "choice": [
        "-fomit-frame-pointer", 
        "-fno-omit-frame-pointer"
      ], 
      "default": "", 
      "desc": "compiler flag: -fomit-frame-pointer", 
      "sort": 5700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##optimize-register-move": {
      "can_omit": "yes", 
      "choice": [
        "-foptimize-register-move", 
        "-fno-optimize-register-move"
      ], 
      "default": "", 
      "desc": "compiler flag: -foptimize-register-move", 
      "sort": 5800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##optimize-sibling-calls": {
      "can_omit": "yes", 
      "choice": [
        "-foptimize-sibling-calls", 
        "-fno-optimize-sibling-calls"
      ], 
      "default": "", 
      "desc": "compiler flag: -foptimize-sibling-calls", 
      "sort": 5900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##param_-falign-jumps=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -falign-jumps=@var{n}", 
      "explore_prefix": "-falign-jumps=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_-falign-labels=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -falign-labels=@var{n}", 
      "explore_prefix": "-falign-labels=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_-falign-loops=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -falign-loops=@var{n}", 
      "explore_prefix": "-falign-loops=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_-finline-limit=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -finline-limit=@var{n}", 
      "explore_prefix": "-finline-limit=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_-fsched-stalled-insns-dep=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -fsched-stalled-insns-dep=@var{n}", 
      "explore_prefix": "-fsched-stalled-insns-dep=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_-fsched-stalled-insns=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -fsched-stalled-insns=@var{n}", 
      "explore_prefix": "-fsched-stalled-insns=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_gcse-after-reload-critical-fraction": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param gcse-after-reload-critical-fraction= (The threshold ratio of critical edges execution count that permit performing redundancy elimination after reload)", 
      "explore_prefix": "--param gcse-after-reload-critical-fraction=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20, 
      "sort": 33000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_gcse-after-reload-partial-fraction": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param gcse-after-reload-partial-fraction= (The threshold ratio for performing partial redundancy elimination after reload)", 
      "explore_prefix": "--param gcse-after-reload-partial-fraction=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 6, 
      "sort": 32900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_global-var-threshold": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param global-var-threshold= (Given N calls and V call-clobbered vars in a function.  Use .GLOBAL_VAR if NxV is larger than this limit)", 
      "explore_prefix": "--param global-var-threshold=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 1000000, 
      "sort": 36700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_hot-bb-count-fraction": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param hot-bb-count-fraction= (Select fraction of the maximal count of repetitions of basic block in program given basic block needs to have to be considered hot)", 
      "explore_prefix": "--param hot-bb-count-fraction=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20000, 
      "sort": 34600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_hot-bb-frequency-fraction": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param hot-bb-frequency-fraction= (Select fraction of the maximal frequency of executions of basic block in function given basic block needs to have to be considered hot)", 
      "explore_prefix": "--param hot-bb-frequency-fraction=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 2000, 
      "sort": 34700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_inline-call-cost": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param inline-call-cost= (expense of call operation relative to ordinary arithmetic operations)", 
      "explore_prefix": "--param inline-call-cost=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 32, 
      "sort": 32600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_inline-unit-growth": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param inline-unit-growth= (how much can given compilation unit grow because of the inlining (in percent))", 
      "explore_prefix": "--param inline-unit-growth=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 32500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_integer-share-limit": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param integer-share-limit= (The upper bound for sharing integer constants)", 
      "explore_prefix": "--param integer-share-limit=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 512, 
      "sort": 37800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_iv-always-prune-cand-set-bound": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param iv-always-prune-cand-set-bound= (If number of candidates in the set is smaller, we always try to remove unused ivs during its optimization)", 
      "explore_prefix": "--param iv-always-prune-cand-set-bound=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20, 
      "sort": 36400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_iv-consider-all-candidates-bound": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param iv-consider-all-candidates-bound= (Bound on number of candidates below that all candidates are considered in iv optimizations)", 
      "explore_prefix": "--param iv-consider-all-candidates-bound=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 60, 
      "sort": 36200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_iv-max-considered-uses": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param iv-max-considered-uses= (Bound on number of iv uses in loop optimized in iv optimizations)", 
      "explore_prefix": "--param iv-max-considered-uses=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 500, 
      "sort": 36300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_large-function-growth": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param large-function-growth= (Maximal growth due to inlining of large function (in percent))", 
      "explore_prefix": "--param large-function-growth=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 32300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_large-function-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param large-function-insns= (The size of function body to be considered large)", 
      "explore_prefix": "--param large-function-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 5400, 
      "sort": 32200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_large-unit-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param large-unit-insns= (The size of translation unit to be considered large)", 
      "explore_prefix": "--param large-unit-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20000, 
      "sort": 32400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_lim-expensive": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param lim-expensive= (The minimum cost of an expensive expression in the loop invariant motion)", 
      "explore_prefix": "--param lim-expensive=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 40, 
      "sort": 36100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-aliased-vops": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-aliased-vops= (The maximum number of virtual operands allowed to represent aliases before triggering alias grouping)", 
      "explore_prefix": "--param max-aliased-vops=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 1000, 
      "sort": 37300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-average-unrolled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-average-unrolled-insns= (The maximum number of instructions to consider to unroll in a loop on average)", 
      "explore_prefix": "--param max-average-unrolled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 160, 
      "sort": 33200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-completely-peel-times": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-completely-peel-times= (The maximum number of peelings of a single loop that is peeled completely)", 
      "explore_prefix": "--param max-completely-peel-times=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 32, 
      "sort": 33700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-completely-peeled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-completely-peeled-insns= (The maximum number of insns of a completely peeled loop)", 
      "explore_prefix": "--param max-completely-peeled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 800, 
      "sort": 33600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-crossjump-edges": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-crossjump-edges= (The maximum number of incoming edges to consider for crossjumping)", 
      "explore_prefix": "--param max-crossjump-edges=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 35500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-cse-path-length": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-cse-path-length= (The maximum length of path considered in cse)", 
      "explore_prefix": "--param max-cse-path-length=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20, 
      "sort": 35900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-cselib-memory-locations": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-cselib-memory-locations= (The maximum memory locations recorded by cselib)", 
      "explore_prefix": "--param max-cselib-memory-locations=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 1000, 
      "sort": 36800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-delay-slot-insn-search": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-delay-slot-insn-search= (The maximum number of instructions to consider to fill a delay slot)", 
      "explore_prefix": "--param max-delay-slot-insn-search=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 31900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-delay-slot-live-search": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-delay-slot-live-search= (The maximum number of instructions to consider to find accurate live register information)", 
      "explore_prefix": "--param max-delay-slot-live-search=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 666, 
      "sort": 32000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-fields-for-field-sensitive": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-fields-for-field-sensitive= (Maximum number of fields in a structure before pointer analysis treats the structure as a single variable)", 
      "explore_prefix": "--param max-fields-for-field-sensitive=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 38300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-flow-memory-locations": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-flow-memory-locations= (The maximum memory locations recorded by flow)", 
      "explore_prefix": "--param max-flow-memory-locations=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 36900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-gcse-passes": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-gcse-passes= (The maximum number of passes to make when doing GCSE)", 
      "explore_prefix": "--param max-gcse-passes=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 2, 
      "sort": 32800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-goto-duplication-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-goto-duplication-insns= (The maximum number of insns to duplicate when unfactoring computed gotos)", 
      "explore_prefix": "--param max-goto-duplication-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 16, 
      "sort": 35800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-grow-copy-bb-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-grow-copy-bb-insns= (The maximum expansion factor when copying basic blocks)", 
      "explore_prefix": "--param max-grow-copy-bb-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 16, 
      "sort": 35700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-inline-insns-auto": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-inline-insns-auto= (The maximum number of instructions when automatically inlining)", 
      "explore_prefix": "--param max-inline-insns-auto=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 180, 
      "sort": 31200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-inline-insns-recursive": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-inline-insns-recursive= (The maximum number of instructions inline function can grow to via recursive inlining)", 
      "explore_prefix": "--param max-inline-insns-recursive=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 900, 
      "sort": 31300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-inline-insns-recursive-auto": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-inline-insns-recursive-auto= (The maximum number of instructions non-inline function can grow to via recursive inlining)", 
      "explore_prefix": "--param max-inline-insns-recursive-auto=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 900, 
      "sort": 31400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-inline-insns-single": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-inline-insns-single= (The maximum number of instructions in a single function eligible for inlining)", 
      "explore_prefix": "--param max-inline-insns-single=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 900, 
      "sort": 31100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-inline-recursive-depth": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-inline-recursive-depth= (The maximum depth of recursive inlining for inline functions)", 
      "explore_prefix": "--param max-inline-recursive-depth=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 16, 
      "sort": 31500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-inline-recursive-depth-auto": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-inline-recursive-depth-auto= (The maximum depth of recursive inlining for non-inline functions)", 
      "explore_prefix": "--param max-inline-recursive-depth-auto=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 16, 
      "sort": 31600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-iterations-to-track": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-iterations-to-track= (Bound on the number of iterations the brute force # of iterations analysis algorithm evaluates)", 
      "explore_prefix": "--param max-iterations-to-track=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 2000, 
      "sort": 34100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-jump-thread-duplication-stmts": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-jump-thread-duplication-stmts= (Maximum number of statements allowed in a block that needs to be duplicated when threading jumps)", 
      "explore_prefix": "--param max-jump-thread-duplication-stmts=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 30, 
      "sort": 38200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-last-value-rtl": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-last-value-rtl= (The maximum number of RTL nodes that can be recorded as combiner's last value)", 
      "explore_prefix": "--param max-last-value-rtl=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20000, 
      "sort": 37700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-once-peeled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-once-peeled-insns= (The maximum number of insns of a peeled loop that rolls only once)", 
      "explore_prefix": "--param max-once-peeled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 800, 
      "sort": 33800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-peel-times": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-peel-times= (The maximum number of peelings of a single loop)", 
      "explore_prefix": "--param max-peel-times=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 32, 
      "sort": 33500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-peeled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-peeled-insns= (The maximum number of insns of a peeled loop)", 
      "explore_prefix": "--param max-peeled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 800, 
      "sort": 33400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-pending-list-length": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-pending-list-length= (The maximum length of scheduling's pending operations list)", 
      "explore_prefix": "--param max-pending-list-length=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 64, 
      "sort": 32100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-predicted-iterations": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-predicted-iterations= (The maximum number of loop iterations we predict statically)", 
      "explore_prefix": "--param max-predicted-iterations=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 34800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-reload-search-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-reload-search-insns= (The maximum number of instructions to search backward when looking for equivalent reload)", 
      "explore_prefix": "--param max-reload-search-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 37200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-sched-region-blocks": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-sched-region-blocks= (The maximum number of blocks in a region to be considered for interblock scheduling)", 
      "explore_prefix": "--param max-sched-region-blocks=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20, 
      "sort": 37400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-sched-region-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-sched-region-insns= (The maximum number of insns in a region to be considered for interblock scheduling)", 
      "explore_prefix": "--param max-sched-region-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 37500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-sms-loop-number": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-sms-loop-number= (Maximum number of loops to perform swing modulo scheduling on (mainly for debugging))", 
      "explore_prefix": "--param max-sms-loop-number=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": -2, 
      "sort": 34200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-unroll-times": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-unroll-times= (The maximum number of unrollings of a single loop)", 
      "explore_prefix": "--param max-unroll-times=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 16, 
      "sort": 33300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-unrolled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-unrolled-insns= (The maximum number of instructions to consider to unroll in a loop)", 
      "explore_prefix": "--param max-unrolled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 400, 
      "sort": 33100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-unswitch-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-unswitch-insns= (The maximum number of insns of an unswitched loop)", 
      "explore_prefix": "--param max-unswitch-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 33900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-unswitch-level": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-unswitch-level= (The maximum number of unswitchings in a single loop)", 
      "explore_prefix": "--param max-unswitch-level=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 6, 
      "sort": 34000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-variable-expansions-in-unroller": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-variable-expansions-in-unroller= (If -fvariable-expansion-in-unroller is used, the maximum number of times that an individual variable will be expanded during loop unrolling)", 
      "explore_prefix": "--param max-variable-expansions-in-unroller=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 2, 
      "sort": 31800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_min-crossjump-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param min-crossjump-insns= (The minimum number of matching instructions to consider for crossjumping)", 
      "explore_prefix": "--param min-crossjump-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 10, 
      "sort": 35600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_min-inline-recursive-probability": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param min-inline-recursive-probability= (Inline recursively only when the probability of call being executed exceeds the parameter)", 
      "explore_prefix": "--param min-inline-recursive-probability=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20, 
      "sort": 31700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_min-spec-prob": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param min-spec-prob= (The minimum probability of reaching a source block for interblock speculative scheduling)", 
      "explore_prefix": "--param min-spec-prob=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 80, 
      "sort": 37600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_min-virtual-mappings": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param min-virtual-mappings= (Minimum number of virtual mappings to consider switching to full virtual renames)", 
      "explore_prefix": "--param min-virtual-mappings=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 37900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_salias-max-implicit-fields": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param salias-max-implicit-fields= (The maximum number of fields in a structure variable without direct structure accesses that GCC will attempt to track separately)", 
      "explore_prefix": "--param salias-max-implicit-fields=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 10, 
      "sort": 30700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_scev-max-expr-size": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param scev-max-expr-size= (Bound on size of expressions used in the scalar evolutions analyzer)", 
      "explore_prefix": "--param scev-max-expr-size=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 40, 
      "sort": 36500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_sms-dfa-history": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param sms-dfa-history= (The number of cycles the swing modulo scheduler considers when checking conflicts using DFA)", 
      "explore_prefix": "--param sms-dfa-history=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 34400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_sms-loop-average-count-threshold": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param sms-loop-average-count-threshold= (A threshold on the average loop count considered by the swing modulo scheduler)", 
      "explore_prefix": "--param sms-loop-average-count-threshold=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 34500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_sms-max-ii-factor": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param sms-max-ii-factor= (A factor for tuning the upper bound that swing modulo scheduler uses for scheduling a loop)", 
      "explore_prefix": "--param sms-max-ii-factor=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 34300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_sra-field-structure-ratio": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param sra-field-structure-ratio= (The threshold ratio between instantiated fields and the total structure size)", 
      "explore_prefix": "--param sra-field-structure-ratio=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 31000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_sra-max-structure-count": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param sra-max-structure-count= (The maximum number of structure fields for which GCC willuse by-element copies)", 
      "explore_prefix": "--param sra-max-structure-count=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_sra-max-structure-size": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param sra-max-structure-size= (The maximum structure size (in bytes) for which GCC willuse by-element copies)", 
      "explore_prefix": "--param sra-max-structure-size=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_ssp-buffer-size": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param ssp-buffer-size= (The lower bound for a buffer to be considered for stack smashing protection)", 
      "explore_prefix": "--param ssp-buffer-size=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 16, 
      "sort": 38100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-dynamic-coverage": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-dynamic-coverage= (The percentage of function, weighted by execution frequency, that must be covered by trace formation. Used when profile feedback is not available)", 
      "explore_prefix": "--param tracer-dynamic-coverage=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 35000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-dynamic-coverage-feedback": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-dynamic-coverage-feedback= (The percentage of function, weighted by execution frequency, that must be covered by trace formation. Used when profile feedback is available)", 
      "explore_prefix": "--param tracer-dynamic-coverage-feedback=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 34900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-max-code-growth": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-max-code-growth= (Maximal code growth caused by tail duplication (in percent))", 
      "explore_prefix": "--param tracer-max-code-growth=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 35100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-min-branch-probability": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-min-branch-probability= (Stop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is not available)", 
      "explore_prefix": "--param tracer-min-branch-probability=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 35400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-min-branch-probability-feedback": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-min-branch-probability-feedback= (Stop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is available)", 
      "explore_prefix": "--param tracer-min-branch-probability-feedback=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 35300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-min-branch-ratio": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-min-branch-ratio= (Stop reverse growth if the reverse probability of best edge is less than this threshold (in percent))", 
      "explore_prefix": "--param tracer-min-branch-ratio=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 35200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_vect-max-version-checks": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param vect-max-version-checks= (Bound on number of runtime checks inserted by the vectorizer's loop versioning)", 
      "explore_prefix": "--param vect-max-version-checks=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 12, 
      "sort": 36600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_virtual-mappings-ratio": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param virtual-mappings-ratio= (Ratio between virtual mappings and virtual symbols to do full virtual renames)", 
      "explore_prefix": "--param virtual-mappings-ratio=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 6, 
      "sort": 38000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##peel-loops": {
      "can_omit": "yes", 
      "choice": [
        "-fpeel-loops", 
        "-fno-peel-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -fpeel-loops", 
      "sort": 9000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##peephole": {
      "can_omit": "yes", 
      "choice": [
        "-fpeephole", 
        "-fno-peephole"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-peephole", 
      "sort": 5000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##peephole2": {
      "can_omit": "yes", 
      "choice": [
        "-fpeephole2", 
        "-fno-peephole2"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-peephole2", 
      "sort": 5100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##prefetch-loop-arrays": {
      "can_omit": "yes", 
      "choice": [
        "-fprefetch-loop-arrays", 
        "-fno-prefetch-loop-arrays"
      ], 
      "default": "", 
      "desc": "compiler flag: -fprefetch-loop-arrays", 
      "sort": 6000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##profile-generate": {
      "can_omit": "yes", 
      "choice": [
        "-fprofile-generate", 
        "-fno-profile-generate"
      ], 
      "default": "", 
      "desc": "compiler flag: -fprofile-generate", 
      "sort": 6100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##profile-use": {
      "can_omit": "yes", 
      "choice": [
        "-fprofile-use", 
        "-fno-profile-use"
      ], 
      "default": "", 
      "desc": "compiler flag: -fprofile-use", 
      "sort": 6200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##profile-values": {
      "can_omit": "yes", 
      "choice": [
        "-fprofile-values", 
        "-fno-profile-values"
      ], 
      "default": "", 
      "desc": "compiler flag: -fprofile-values", 
      "sort": 600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##regmove": {
      "can_omit": "yes", 
      "choice": [
        "-fregmove", 
        "-fno-regmove"
      ], 
      "default": "", 
      "desc": "compiler flag: -fregmove", 
      "sort": 6300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##rename-registers": {
      "can_omit": "yes", 
      "choice": [
        "-frename-registers", 
        "-fno-rename-registers"
      ], 
      "default": "", 
      "desc": "compiler flag: -frename-registers", 
      "sort": 6400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##reorder-blocks": {
      "can_omit": "yes", 
      "choice": [
        "-freorder-blocks", 
        "-fno-reorder-blocks"
      ], 
      "default": "", 
      "desc": "compiler flag: -freorder-blocks", 
      "sort": 6500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##reorder-blocks-and-partition": {
      "can_omit": "yes", 
      "choice": [
        "-freorder-blocks-and-partition", 
        "-fno-reorder-blocks-and-partition"
      ], 
      "default": "", 
      "desc": "compiler flag: -freorder-blocks-and-partition", 
      "sort": 6600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##reorder-functions": {
      "can_omit": "yes", 
      "choice": [
        "-freorder-functions", 
        "-fno-reorder-functions"
      ], 
      "default": "", 
      "desc": "compiler flag: -freorder-functions", 
      "sort": 6700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##rerun-cse-after-loop": {
      "can_omit": "yes", 
      "choice": [
        "-frerun-cse-after-loop", 
        "-fno-rerun-cse-after-loop"
      ], 
      "default": "", 
      "desc": "compiler flag: -frerun-cse-after-loop", 
      "sort": 6800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##rerun-loop-opt": {
      "can_omit": "yes", 
      "choice": [
        "-frerun-loop-opt", 
        "-fno-rerun-loop-opt"
      ], 
      "default": "", 
      "desc": "compiler flag: -frerun-loop-opt", 
      "sort": 6900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##reschedule-modulo-scheduled-loops": {
      "can_omit": "yes", 
      "choice": [
        "-freschedule-modulo-scheduled-loops", 
        "-fno-reschedule-modulo-scheduled-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -freschedule-modulo-scheduled-loops", 
      "sort": 7900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##rounding-math": {
      "can_omit": "yes", 
      "choice": [
        "-frounding-math", 
        "-fno-rounding-math"
      ], 
      "default": "", 
      "desc": "compiler flag: -frounding-math", 
      "sort": 7000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched-interblock": {
      "can_omit": "yes", 
      "choice": [
        "-fsched-interblock", 
        "-fno-sched-interblock"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-sched-interblock", 
      "sort": 7300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched-spec": {
      "can_omit": "yes", 
      "choice": [
        "-fsched-spec", 
        "-fno-sched-spec"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-sched-spec", 
      "sort": 7400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched-spec-load": {
      "can_omit": "yes", 
      "choice": [
        "-fsched-spec-load", 
        "-fno-sched-spec-load"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsched-spec-load", 
      "sort": 7500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched-spec-load-dangerous": {
      "can_omit": "yes", 
      "choice": [
        "-fsched-spec-load-dangerous", 
        "-fno-sched-spec-load-dangerous"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsched-spec-load-dangerous", 
      "sort": 7600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched2-use-superblocks": {
      "can_omit": "yes", 
      "choice": [
        "-fsched2-use-superblocks", 
        "-fno-sched2-use-superblocks"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsched2-use-superblocks", 
      "sort": 7700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched2-use-traces": {
      "can_omit": "yes", 
      "choice": [
        "-fsched2-use-traces", 
        "-fno-sched2-use-traces"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsched2-use-traces", 
      "sort": 7800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##schedule-insns": {
      "can_omit": "yes", 
      "choice": [
        "-fschedule-insns", 
        "-fno-schedule-insns"
      ], 
      "default": "", 
      "desc": "compiler flag: -fschedule-insns", 
      "sort": 7100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##schedule-insns2": {
      "can_omit": "yes", 
      "choice": [
        "-fschedule-insns2", 
        "-fno-schedule-insns2"
      ], 
      "default": "", 
      "desc": "compiler flag: -fschedule-insns2", 
      "sort": 7200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##signaling-nans": {
      "can_omit": "yes", 
      "choice": [
        "-fsignaling-nans", 
        "-fno-signaling-nans"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsignaling-nans", 
      "sort": 8000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##single-precision-constant": {
      "can_omit": "yes", 
      "choice": [
        "-fsingle-precision-constant", 
        "-fno-single-precision-constant"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsingle-precision-constant", 
      "sort": 8100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##split-ivs-in-unroller": {
      "can_omit": "yes", 
      "choice": [
        "-fsplit-ivs-in-unroller", 
        "-fno-split-ivs-in-unroller"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsplit-ivs-in-unroller", 
      "sort": 9100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##stack-protector": {
      "can_omit": "yes", 
      "choice": [
        "-fstack-protector", 
        "-fno-stack-protector"
      ], 
      "default": "", 
      "desc": "compiler flag: -fstack-protector", 
      "sort": 8200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##stack-protector-all": {
      "can_omit": "yes", 
      "choice": [
        "-fstack-protector-all", 
        "-fno-stack-protector-all"
      ], 
      "default": "", 
      "desc": "compiler flag: -fstack-protector-all", 
      "sort": 8300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##strength-reduce": {
      "can_omit": "yes", 
      "choice": [
        "-fstrength-reduce", 
        "-fno-strength-reduce"
      ], 
      "default": "", 
      "desc": "compiler flag: -fstrength-reduce", 
      "sort": 8400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##strict-aliasing": {
      "can_omit": "yes", 
      "choice": [
        "-fstrict-aliasing", 
        "-fno-strict-aliasing"
      ], 
      "default": "", 
      "desc": "compiler flag: -fstrict-aliasing", 
      "sort": 8500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##thread-jumps": {
      "can_omit": "yes", 
      "choice": [
        "-fthread-jumps", 
        "-fno-thread-jumps"
      ], 
      "default": "", 
      "desc": "compiler flag: -fthread-jumps", 
      "sort": 8700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tracer": {
      "can_omit": "yes", 
      "choice": [
        "-ftracer", 
        "-fno-tracer"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftracer", 
      "sort": 8600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##trapping-math": {
      "can_omit": "yes", 
      "choice": [
        "-ftrapping-math", 
        "-fno-trapping-math"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-trapping-math", 
      "sort": 5500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-ccp": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-ccp", 
        "-fno-tree-ccp"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-ccp", 
      "sort": 9500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-ch": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-ch", 
        "-fno-tree-ch"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-ch", 
      "sort": 10600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-copy-prop": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-copy-prop", 
        "-fno-tree-copy-prop"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-copy-prop", 
      "sort": 11500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-copyrename": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-copyrename", 
        "-fno-tree-copyrename"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-copyrename", 
      "sort": 10400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-dce": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-dce", 
        "-fno-tree-dce"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-dce", 
      "sort": 9600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-dominator-opts": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-dominator-opts", 
        "-fno-tree-dominator-opts"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-dominator-opts", 
      "sort": 10200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-dse": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-dse", 
        "-fno-tree-dse"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-dse", 
      "sort": 10300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-fre": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-fre", 
        "-fno-tree-fre"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-fre", 
      "sort": 11000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-loop-im": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-loop-im", 
        "-fno-tree-loop-im"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-loop-im", 
      "sort": 9900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-loop-ivcanon": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-loop-ivcanon", 
        "-fno-tree-loop-ivcanon"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-loop-ivcanon", 
      "sort": 10000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-loop-linear": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-loop-linear", 
        "-fno-tree-loop-linear"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-loop-linear", 
      "sort": 9800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-loop-optimize": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-loop-optimize", 
        "-fno-tree-loop-optimize"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-loop-optimize", 
      "sort": 9700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-lrs": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-lrs", 
        "-fno-tree-lrs"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-lrs", 
      "sort": 10900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-pre": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-pre", 
        "-fno-tree-pre"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-pre", 
      "sort": 9400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-salias": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-salias", 
        "-fno-tree-salias"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-salias", 
      "sort": 11300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-sink": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-sink", 
        "-fno-tree-sink"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-sink", 
      "sort": 10500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-sra": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-sra", 
        "-fno-tree-sra"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-sra", 
      "sort": 10700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-store-ccp": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-store-ccp", 
        "-fno-tree-store-ccp"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-store-ccp", 
      "sort": 11600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-store-copy-prop": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-store-copy-prop", 
        "-fno-tree-store-copy-prop"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-store-copy-prop", 
      "sort": 11700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-ter": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-ter", 
        "-fno-tree-ter"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-ter", 
      "sort": 10800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-vect-loop-version": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-vect-loop-version", 
        "-fno-tree-vect-loop-version"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-vect-loop-version", 
      "sort": 11200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tree-vectorize": {
      "can_omit": "yes", 
      "choice": [
        "-ftree-vectorize", 
        "-fno-tree-vectorize"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftree-vectorize", 
      "sort": 11100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##unroll-all-loops": {
      "can_omit": "yes", 
      "choice": [
        "-funroll-all-loops", 
        "-fno-unroll-all-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -funroll-all-loops", 
      "sort": 8800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##unroll-loops": {
      "can_omit": "yes", 
      "choice": [
        "-funroll-loops", 
        "-fno-unroll-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -funroll-loops", 
      "sort": 8900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##unsafe-loop-optimizations": {
      "can_omit": "yes", 
      "choice": [
        "-funsafe-loop-optimizations", 
        "-fno-unsafe-loop-optimizations"
      ], 
      "default": "", 
      "desc": "compiler flag: -funsafe-loop-optimizations", 
      "sort": 5300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##unsafe-math-optimizations": {
      "can_omit": "yes", 
      "choice": [
        "-funsafe-math-optimizations", 
        "-fno-unsafe-math-optimizations"
      ], 
      "default": "", 
      "desc": "compiler flag: -funsafe-math-optimizations", 
      "sort": 5200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##unswitch-loops": {
      "can_omit": "yes", 
      "choice": [
        "-funswitch-loops", 
        "-fno-unswitch-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -funswitch-loops", 
      "sort": 9200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##variable-expansion-in-unroller": {
      "can_omit": "yes", 
      "choice": [
        "-fvariable-expansion-in-unroller", 
        "-fno-variable-expansion-in-unroller"
      ], 
      "default": "", 
      "desc": "compiler flag: -fvariable-expansion-in-unroller", 
      "sort": 9300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##vpt": {
      "can_omit": "yes", 
      "choice": [
        "-fvpt", 
        "-fno-vpt"
      ], 
      "default": "", 
      "desc": "compiler flag: -fvpt", 
      "sort": 700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##web": {
      "can_omit": "yes", 
      "choice": [
        "-fweb", 
        "-fno-web"
      ], 
      "default": "", 
      "desc": "compiler flag: -fweb", 
      "sort": 11400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##whole-program": {
      "can_omit": "yes", 
      "choice": [
        "-fwhole-program", 
        "-fno-whole-program"
      ], 
      "default": "", 
      "desc": "compiler flag: -fwhole-program", 
      "sort": 11800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##zero-initialized-in-bss": {
      "can_omit": "yes", 
      "choice": [
        "-fzero-initialized-in-bss", 
        "-fno-zero-initialized-in-bss"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-zero-initialized-in-bss", 
      "sort": 5600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }
  }
}
