{
  "all_compiler_flags_desc": {
    "##base_opt": {
      "choice": [
        "-O3", 
        "-O0", 
        "-O1", 
        "-O2", 
        "-Os}"
      ], 
      "default": "", 
      "desc": "base compiler flag", 
      "sort": 10000, 
      "tags": [
        "base", 
        "basic", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##branch-count-reg": {
      "can_omit": "yes", 
      "choice": [
        "-fbranch-count-reg", 
        "-fno-branch-count-reg"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-branch-count-reg", 
      "sort": 3400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##branch-probabilities": {
      "can_omit": "yes", 
      "choice": [
        "-fbranch-probabilities", 
        "-fno-branch-probabilities"
      ], 
      "default": "", 
      "desc": "compiler flag: -fbranch-probabilities", 
      "sort": 100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##branch-target-load-optimize": {
      "can_omit": "yes", 
      "choice": [
        "-fbranch-target-load-optimize", 
        "-fno-branch-target-load-optimize"
      ], 
      "default": "", 
      "desc": "compiler flag: -fbranch-target-load-optimize", 
      "sort": 400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##branch-target-load-optimize2": {
      "can_omit": "yes", 
      "choice": [
        "-fbranch-target-load-optimize2", 
        "-fno-branch-target-load-optimize2"
      ], 
      "default": "", 
      "desc": "compiler flag: -fbranch-target-load-optimize2", 
      "sort": 500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##caller-saves": {
      "can_omit": "yes", 
      "choice": [
        "-fcaller-saves", 
        "-fno-caller-saves"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcaller-saves", 
      "sort": 600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##cprop-registers": {
      "can_omit": "yes", 
      "choice": [
        "-fcprop-registers", 
        "-fno-cprop-registers"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcprop-registers", 
      "sort": 700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##crossjumping": {
      "can_omit": "yes", 
      "choice": [
        "-fcrossjumping", 
        "-fno-crossjumping"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcrossjumping", 
      "sort": 2400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##cse-follow-jumps": {
      "can_omit": "yes", 
      "choice": [
        "-fcse-follow-jumps", 
        "-fno-cse-follow-jumps"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcse-follow-jumps", 
      "sort": 800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##cse-skip-blocks": {
      "can_omit": "yes", 
      "choice": [
        "-fcse-skip-blocks", 
        "-fno-cse-skip-blocks"
      ], 
      "default": "", 
      "desc": "compiler flag: -fcse-skip-blocks", 
      "sort": 900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##data-sections": {
      "can_omit": "yes", 
      "choice": [
        "-fdata-sections", 
        "-fno-data-sections"
      ], 
      "default": "", 
      "desc": "compiler flag: -fdata-sections", 
      "sort": 1000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##default-inline": {
      "can_omit": "yes", 
      "choice": [
        "-fdefault-inline", 
        "-fno-default-inline"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-default-inline", 
      "sort": 3500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##defer-pop": {
      "can_omit": "yes", 
      "choice": [
        "-fdefer-pop", 
        "-fno-defer-pop"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-defer-pop", 
      "sort": 3600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##delayed-branch": {
      "can_omit": "yes", 
      "choice": [
        "-fdelayed-branch", 
        "-fno-delayed-branch"
      ], 
      "default": "", 
      "desc": "compiler flag: -fdelayed-branch", 
      "sort": 1100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##delete-null-pointer-checks": {
      "can_omit": "yes", 
      "choice": [
        "-fdelete-null-pointer-checks", 
        "-fno-delete-null-pointer-checks"
      ], 
      "default": "", 
      "desc": "compiler flag: -fdelete-null-pointer-checks", 
      "sort": 1200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##expensive-optimizations": {
      "can_omit": "yes", 
      "choice": [
        "-fexpensive-optimizations", 
        "-fno-expensive-optimizations"
      ], 
      "default": "", 
      "desc": "compiler flag: -fexpensive-optimizations", 
      "sort": 1300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##fast-math": {
      "can_omit": "yes", 
      "choice": [
        "-ffast-math", 
        "-fno-fast-math"
      ], 
      "default": "", 
      "desc": "compiler flag: -ffast-math", 
      "sort": 1400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##finite-math-only": {
      "can_omit": "yes", 
      "choice": [
        "-ffinite-math-only", 
        "-fno-finite-math-only"
      ], 
      "default": "", 
      "desc": "compiler flag: -ffinite-math-only", 
      "sort": 4400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##float-store": {
      "can_omit": "yes", 
      "choice": [
        "-ffloat-store", 
        "-fno-float-store"
      ], 
      "default": "", 
      "desc": "compiler flag: -ffloat-store", 
      "sort": 1500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##force-addr": {
      "can_omit": "yes", 
      "choice": [
        "-fforce-addr", 
        "-fno-force-addr"
      ], 
      "default": "", 
      "desc": "compiler flag: -fforce-addr", 
      "sort": 1600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##force-mem": {
      "can_omit": "yes", 
      "choice": [
        "-fforce-mem", 
        "-fno-force-mem"
      ], 
      "default": "", 
      "desc": "compiler flag: -fforce-mem", 
      "sort": 1700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##function-cse": {
      "can_omit": "yes", 
      "choice": [
        "-ffunction-cse", 
        "-fno-function-cse"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-function-cse", 
      "sort": 3700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##function-sections": {
      "can_omit": "yes", 
      "choice": [
        "-ffunction-sections", 
        "-fno-function-sections"
      ], 
      "default": "", 
      "desc": "compiler flag: -ffunction-sections", 
      "sort": 1800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##gcse": {
      "can_omit": "yes", 
      "choice": [
        "-fgcse", 
        "-fno-gcse"
      ], 
      "default": "", 
      "desc": "compiler flag: -fgcse", 
      "sort": 1900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##gcse-las": {
      "can_omit": "yes", 
      "choice": [
        "-fgcse-las", 
        "-fno-gcse-las"
      ], 
      "default": "", 
      "desc": "compiler flag: -fgcse-las", 
      "sort": 2200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##gcse-lm": {
      "can_omit": "yes", 
      "choice": [
        "-fgcse-lm", 
        "-fno-gcse-lm"
      ], 
      "default": "", 
      "desc": "compiler flag: -fgcse-lm", 
      "sort": 2000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##gcse-sm": {
      "can_omit": "yes", 
      "choice": [
        "-fgcse-sm", 
        "-fno-gcse-sm"
      ], 
      "default": "", 
      "desc": "compiler flag: -fgcse-sm", 
      "sort": 2100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##guess-branch-probability": {
      "can_omit": "yes", 
      "choice": [
        "-fguess-branch-probability", 
        "-fno-guess-branch-probability"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-guess-branch-probability", 
      "sort": 3800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##if-conversion": {
      "can_omit": "yes", 
      "choice": [
        "-fif-conversion", 
        "-fno-if-conversion"
      ], 
      "default": "", 
      "desc": "compiler flag: -fif-conversion", 
      "sort": 2500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##if-conversion2": {
      "can_omit": "yes", 
      "choice": [
        "-fif-conversion2", 
        "-fno-if-conversion2"
      ], 
      "default": "", 
      "desc": "compiler flag: -fif-conversion2", 
      "sort": 2600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##inline": {
      "can_omit": "yes", 
      "choice": [
        "-finline", 
        "-fno-inline"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-inline", 
      "sort": 3900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##inline-functions": {
      "can_omit": "yes", 
      "choice": [
        "-finline-functions", 
        "-fno-inline-functions"
      ], 
      "default": "", 
      "desc": "compiler flag: -finline-functions", 
      "sort": 2700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##keep-inline-functions": {
      "can_omit": "yes", 
      "choice": [
        "-fkeep-inline-functions", 
        "-fno-keep-inline-functions"
      ], 
      "default": "", 
      "desc": "compiler flag: -fkeep-inline-functions", 
      "sort": 2800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##keep-static-consts": {
      "can_omit": "yes", 
      "choice": [
        "-fkeep-static-consts", 
        "-fno-keep-static-consts"
      ], 
      "default": "", 
      "desc": "compiler flag: -fkeep-static-consts", 
      "sort": 2900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##loop-optimize": {
      "can_omit": "yes", 
      "choice": [
        "-floop-optimize", 
        "-fno-loop-optimize"
      ], 
      "default": "", 
      "desc": "compiler flag: -floop-optimize", 
      "sort": 2300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##math-errno": {
      "can_omit": "yes", 
      "choice": [
        "-fmath-errno", 
        "-fno-math-errno"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-math-errno", 
      "sort": 4000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##merge-all-constants": {
      "can_omit": "yes", 
      "choice": [
        "-fmerge-all-constants", 
        "-fno-merge-all-constants"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmerge-all-constants", 
      "sort": 3100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##merge-constants": {
      "can_omit": "yes", 
      "choice": [
        "-fmerge-constants", 
        "-fno-merge-constants"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmerge-constants", 
      "sort": 3000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##move-all-movables": {
      "can_omit": "yes", 
      "choice": [
        "-fmove-all-movables", 
        "-fno-move-all-movables"
      ], 
      "default": "", 
      "desc": "compiler flag: -fmove-all-movables", 
      "sort": 3200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##new-ra": {
      "can_omit": "yes", 
      "choice": [
        "-fnew-ra", 
        "-fno-new-ra"
      ], 
      "default": "", 
      "desc": "compiler flag: -fnew-ra", 
      "sort": 3300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##old-unroll-all-loops": {
      "can_omit": "yes", 
      "choice": [
        "-fold-unroll-all-loops", 
        "-fno-old-unroll-all-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -fold-unroll-all-loops", 
      "sort": 8000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##old-unroll-loops": {
      "can_omit": "yes", 
      "choice": [
        "-fold-unroll-loops", 
        "-fno-old-unroll-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -fold-unroll-loops", 
      "sort": 7900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##omit-frame-pointer": {
      "can_omit": "yes", 
      "choice": [
        "-fomit-frame-pointer", 
        "-fno-omit-frame-pointer"
      ], 
      "default": "", 
      "desc": "compiler flag: -fomit-frame-pointer", 
      "sort": 4700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##optimize-register-move": {
      "can_omit": "yes", 
      "choice": [
        "-foptimize-register-move", 
        "-fno-optimize-register-move"
      ], 
      "default": "", 
      "desc": "compiler flag: -foptimize-register-move", 
      "sort": 4800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##optimize-sibling-calls": {
      "can_omit": "yes", 
      "choice": [
        "-foptimize-sibling-calls", 
        "-fno-optimize-sibling-calls"
      ], 
      "default": "", 
      "desc": "compiler flag: -foptimize-sibling-calls", 
      "sort": 4900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##param_-falign-jumps=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -falign-jumps=@var{n}", 
      "explore_prefix": "-falign-jumps=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_-falign-labels=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -falign-labels=@var{n}", 
      "explore_prefix": "-falign-labels=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_-falign-loops=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -falign-loops=@var{n}", 
      "explore_prefix": "-falign-loops=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_-finline-limit=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -finline-limit=@var{n}", 
      "explore_prefix": "-finline-limit=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_-fsched-stalled-insns=": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: -fsched-stalled-insns=@var{n}", 
      "explore_prefix": "-fsched-stalled-insns=@var{n}", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 0, 
      "sort": 30500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_hot-bb-count-fraction": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param hot-bb-count-fraction= (Select fraction of the maximal count of repetitions of basic block inrogram given basic block needs to have to be considered hot)", 
      "explore_prefix": "--param hot-bb-count-fraction=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20000, 
      "sort": 32700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_hot-bb-frequency-fraction": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param hot-bb-frequency-fraction= (Select fraction of the maximal frequency of executions of basiclock in function given basic block needs to have to be considered hot)", 
      "explore_prefix": "--param hot-bb-frequency-fraction=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 2000, 
      "sort": 32800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_inline-unit-growth": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param inline-unit-growth= (how much can given compilation unit grow because of the inlining (in percent))", 
      "explore_prefix": "--param inline-unit-growth=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 31400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_large-function-growth": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param large-function-growth= (Maximal growth due to inlining of large function (in percent))", 
      "explore_prefix": "--param large-function-growth=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 31300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_large-function-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param large-function-insns= (The size of function body to be considered large)", 
      "explore_prefix": "--param large-function-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 6000, 
      "sort": 31200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-average-unrolled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-average-unrolled-insns= (The maximum number of instructions to consider to unroll in a loop on average)", 
      "explore_prefix": "--param max-average-unrolled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 160, 
      "sort": 31800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-completely-peel-times": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-completely-peel-times= (The maximum number of peelings of a single loop that is peeled completely)", 
      "explore_prefix": "--param max-completely-peel-times=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 32, 
      "sort": 32300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-completely-peeled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-completely-peeled-insns= (The maximum number of insns of a completely peeled loop)", 
      "explore_prefix": "--param max-completely-peeled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 800, 
      "sort": 32200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-crossjump-edges": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-crossjump-edges= (The maximum number of incoming edges to consider for crossjumping)", 
      "explore_prefix": "--param max-crossjump-edges=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 33500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-cse-path-length": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-cse-path-length= (The maximum length of path considered in cse)", 
      "explore_prefix": "--param max-cse-path-length=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20, 
      "sort": 33600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-cselib-memory-locations": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-cselib-memory-locations= (The maximum memory locations recorded by cselib)", 
      "explore_prefix": "--param max-cselib-memory-locations=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 1000, 
      "sort": 33700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-delay-slot-insn-search": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-delay-slot-insn-search= (The maximum number of instructions to consider to fill a delay slot)", 
      "explore_prefix": "--param max-delay-slot-insn-search=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 30900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-delay-slot-live-search": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-delay-slot-live-search= (The maximum number of instructions to consider to find accurate live register information)", 
      "explore_prefix": "--param max-delay-slot-live-search=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 666, 
      "sort": 31000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-gcse-passes": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-gcse-passes= (The maximum number of passes to make when doing GCSE)", 
      "explore_prefix": "--param max-gcse-passes=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 2, 
      "sort": 31600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-inline-insns-auto": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-inline-insns-auto= (The maximum number of instructions when automatically inlining)", 
      "explore_prefix": "--param max-inline-insns-auto=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 30700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-inline-insns-rtl": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-inline-insns-rtl= (The maximum number of instructions for the RTL inliner)", 
      "explore_prefix": "--param max-inline-insns-rtl=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 1200, 
      "sort": 30800, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-inline-insns-single": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-inline-insns-single= (The maximum number of instructions in a single function eligible for inlining)", 
      "explore_prefix": "--param max-inline-insns-single=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 1000, 
      "sort": 30600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-once-peeled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-once-peeled-insns= (The maximum number of insns of a peeled loop that rolls only once)", 
      "explore_prefix": "--param max-once-peeled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 800, 
      "sort": 32400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-peel-times": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-peel-times= (The maximum number of peelings of a single loop)", 
      "explore_prefix": "--param max-peel-times=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 32, 
      "sort": 32100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-peeled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-peeled-insns= (The maximum number of insns of a peeled loop)", 
      "explore_prefix": "--param max-peeled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 800, 
      "sort": 32000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-pending-list-length": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-pending-list-length= (The maximum length of scheduling's pending operations list)", 
      "explore_prefix": "--param max-pending-list-length=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 64, 
      "sort": 31100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-reload-search-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-reload-search-insns= (The maximum number of instructions to search backward when looking for equivalent reload)", 
      "explore_prefix": "--param max-reload-search-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 34000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-unroll-times": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-unroll-times= (The maximum number of unrollings of a single loop)", 
      "explore_prefix": "--param max-unroll-times=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 16, 
      "sort": 31900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-unrolled-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-unrolled-insns= (The maximum number of instructions to consider to unroll in a loop)", 
      "explore_prefix": "--param max-unrolled-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 400, 
      "sort": 31700, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-unswitch-insns": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-unswitch-insns= (The maximum number of insns of an unswitched loop)", 
      "explore_prefix": "--param max-unswitch-insns=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 32500, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_max-unswitch-level": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param max-unswitch-level= (The maximum number of unswitchings in a single loop)", 
      "explore_prefix": "--param max-unswitch-level=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 6, 
      "sort": 32600, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-dynamic-coverage": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-dynamic-coverage= (The percentage of function, weighted by execution frequency, thatust be covered by trace formation. Used when profile feedback is not available)", 
      "explore_prefix": "--param tracer-dynamic-coverage=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 150, 
      "sort": 33000, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-dynamic-coverage-feedback": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-dynamic-coverage-feedback= (The percentage of function, weighted by execution frequency, thatust be covered by trace formation. Used when profile feedback is available)", 
      "explore_prefix": "--param tracer-dynamic-coverage-feedback=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 190, 
      "sort": 32900, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-max-code-growth": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-max-code-growth= (Maximal code growth caused by tail duplication (in percent))", 
      "explore_prefix": "--param tracer-max-code-growth=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 200, 
      "sort": 33100, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-min-branch-probability": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-min-branch-probability= (Stop forward growth if the probability of best edge is less thanhis threshold (in percent). Used when profile feedback is not available)", 
      "explore_prefix": "--param tracer-min-branch-probability=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 100, 
      "sort": 33400, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-min-branch-probability-feedback": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-min-branch-probability-feedback= (Stop forward growth if the probability of best edge is less thanhis threshold (in percent). Used when profile feedback is available)", 
      "explore_prefix": "--param tracer-min-branch-probability-feedback=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 160, 
      "sort": 33300, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##param_tracer-min-branch-ratio": {
      "can_omit": "yes", 
      "default": "", 
      "desc": "compiler flag: --param tracer-min-branch-ratio= (Stop reverse growth if the reverse probability of best edge is lesshan this threshold (in percent))", 
      "explore_prefix": "--param tracer-min-branch-ratio=", 
      "explore_start": 0, 
      "explore_step": 1, 
      "explore_stop": 20, 
      "sort": 33200, 
      "tags": [
        "basic", 
        "parametric", 
        "optimization"
      ], 
      "type": "integer"
    }, 
    "##peel-loops": {
      "can_omit": "yes", 
      "choice": [
        "-fpeel-loops", 
        "-fno-peel-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -fpeel-loops", 
      "sort": 7700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##peephole": {
      "can_omit": "yes", 
      "choice": [
        "-fpeephole", 
        "-fno-peephole"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-peephole", 
      "sort": 4100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##peephole2": {
      "can_omit": "yes", 
      "choice": [
        "-fpeephole2", 
        "-fno-peephole2"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-peephole2", 
      "sort": 4200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##prefetch-loop-arrays": {
      "can_omit": "yes", 
      "choice": [
        "-fprefetch-loop-arrays", 
        "-fno-prefetch-loop-arrays"
      ], 
      "default": "", 
      "desc": "compiler flag: -fprefetch-loop-arrays", 
      "sort": 5000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##profile-generate": {
      "can_omit": "yes", 
      "choice": [
        "-fprofile-generate", 
        "-fno-profile-generate"
      ], 
      "default": "", 
      "desc": "compiler flag: -fprofile-generate", 
      "sort": 5100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##profile-use": {
      "can_omit": "yes", 
      "choice": [
        "-fprofile-use", 
        "-fno-profile-use"
      ], 
      "default": "", 
      "desc": "compiler flag: -fprofile-use", 
      "sort": 5200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##profile-values": {
      "can_omit": "yes", 
      "choice": [
        "-fprofile-values", 
        "-fno-profile-values"
      ], 
      "default": "", 
      "desc": "compiler flag: -fprofile-values", 
      "sort": 200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##reduce-all-givs": {
      "can_omit": "yes", 
      "choice": [
        "-freduce-all-givs", 
        "-fno-reduce-all-givs"
      ], 
      "default": "", 
      "desc": "compiler flag: -freduce-all-givs", 
      "sort": 5300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##regmove": {
      "can_omit": "yes", 
      "choice": [
        "-fregmove", 
        "-fno-regmove"
      ], 
      "default": "", 
      "desc": "compiler flag: -fregmove", 
      "sort": 5400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##rename-registers": {
      "can_omit": "yes", 
      "choice": [
        "-frename-registers", 
        "-fno-rename-registers"
      ], 
      "default": "", 
      "desc": "compiler flag: -frename-registers", 
      "sort": 5500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##reorder-blocks": {
      "can_omit": "yes", 
      "choice": [
        "-freorder-blocks", 
        "-fno-reorder-blocks"
      ], 
      "default": "", 
      "desc": "compiler flag: -freorder-blocks", 
      "sort": 5600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##reorder-functions": {
      "can_omit": "yes", 
      "choice": [
        "-freorder-functions", 
        "-fno-reorder-functions"
      ], 
      "default": "", 
      "desc": "compiler flag: -freorder-functions", 
      "sort": 5700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##rerun-cse-after-loop": {
      "can_omit": "yes", 
      "choice": [
        "-frerun-cse-after-loop", 
        "-fno-rerun-cse-after-loop"
      ], 
      "default": "", 
      "desc": "compiler flag: -frerun-cse-after-loop", 
      "sort": 5800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##rerun-loop-opt": {
      "can_omit": "yes", 
      "choice": [
        "-frerun-loop-opt", 
        "-fno-rerun-loop-opt"
      ], 
      "default": "", 
      "desc": "compiler flag: -frerun-loop-opt", 
      "sort": 5900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##rounding-math": {
      "can_omit": "yes", 
      "choice": [
        "-frounding-math", 
        "-fno-rounding-math"
      ], 
      "default": "", 
      "desc": "compiler flag: -frounding-math", 
      "sort": 6000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched-interblock": {
      "can_omit": "yes", 
      "choice": [
        "-fsched-interblock", 
        "-fno-sched-interblock"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-sched-interblock", 
      "sort": 6300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched-spec": {
      "can_omit": "yes", 
      "choice": [
        "-fsched-spec", 
        "-fno-sched-spec"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-sched-spec", 
      "sort": 6400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched-spec-load": {
      "can_omit": "yes", 
      "choice": [
        "-fsched-spec-load", 
        "-fno-sched-spec-load"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsched-spec-load", 
      "sort": 6500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched-spec-load-dangerous": {
      "can_omit": "yes", 
      "choice": [
        "-fsched-spec-load-dangerous", 
        "-fno-sched-spec-load-dangerous"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsched-spec-load-dangerous", 
      "sort": 6600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched2-use-superblocks": {
      "can_omit": "yes", 
      "choice": [
        "-fsched2-use-superblocks", 
        "-fno-sched2-use-superblocks"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsched2-use-superblocks", 
      "sort": 6700, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##sched2-use-traces": {
      "can_omit": "yes", 
      "choice": [
        "-fsched2-use-traces", 
        "-fno-sched2-use-traces"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsched2-use-traces", 
      "sort": 6800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##schedule-insns": {
      "can_omit": "yes", 
      "choice": [
        "-fschedule-insns", 
        "-fno-schedule-insns"
      ], 
      "default": "", 
      "desc": "compiler flag: -fschedule-insns", 
      "sort": 6100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##schedule-insns2": {
      "can_omit": "yes", 
      "choice": [
        "-fschedule-insns2", 
        "-fno-schedule-insns2"
      ], 
      "default": "", 
      "desc": "compiler flag: -fschedule-insns2", 
      "sort": 6200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##signaling-nans": {
      "can_omit": "yes", 
      "choice": [
        "-fsignaling-nans", 
        "-fno-signaling-nans"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsignaling-nans", 
      "sort": 6900, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##single-precision-constant": {
      "can_omit": "yes", 
      "choice": [
        "-fsingle-precision-constant", 
        "-fno-single-precision-constant"
      ], 
      "default": "", 
      "desc": "compiler flag: -fsingle-precision-constant", 
      "sort": 7000, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##strength-reduce": {
      "can_omit": "yes", 
      "choice": [
        "-fstrength-reduce", 
        "-fno-strength-reduce"
      ], 
      "default": "", 
      "desc": "compiler flag: -fstrength-reduce", 
      "sort": 7100, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##strict-aliasing": {
      "can_omit": "yes", 
      "choice": [
        "-fstrict-aliasing", 
        "-fno-strict-aliasing"
      ], 
      "default": "", 
      "desc": "compiler flag: -fstrict-aliasing", 
      "sort": 7200, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##thread-jumps": {
      "can_omit": "yes", 
      "choice": [
        "-fthread-jumps", 
        "-fno-thread-jumps"
      ], 
      "default": "", 
      "desc": "compiler flag: -fthread-jumps", 
      "sort": 7400, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##tracer": {
      "can_omit": "yes", 
      "choice": [
        "-ftracer", 
        "-fno-tracer"
      ], 
      "default": "", 
      "desc": "compiler flag: -ftracer", 
      "sort": 7300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##trapping-math": {
      "can_omit": "yes", 
      "choice": [
        "-ftrapping-math", 
        "-fno-trapping-math"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-trapping-math", 
      "sort": 4500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##unroll-all-loops": {
      "can_omit": "yes", 
      "choice": [
        "-funroll-all-loops", 
        "-fno-unroll-all-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -funroll-all-loops", 
      "sort": 7500, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##unroll-loops": {
      "can_omit": "yes", 
      "choice": [
        "-funroll-loops", 
        "-fno-unroll-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -funroll-loops", 
      "sort": 7600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##unsafe-math-optimizations": {
      "can_omit": "yes", 
      "choice": [
        "-funsafe-math-optimizations", 
        "-fno-unsafe-math-optimizations"
      ], 
      "default": "", 
      "desc": "compiler flag: -funsafe-math-optimizations", 
      "sort": 4300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##unswitch-loops": {
      "can_omit": "yes", 
      "choice": [
        "-funswitch-loops", 
        "-fno-unswitch-loops"
      ], 
      "default": "", 
      "desc": "compiler flag: -funswitch-loops", 
      "sort": 7800, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##vpt": {
      "can_omit": "yes", 
      "choice": [
        "-fvpt", 
        "-fno-vpt"
      ], 
      "default": "", 
      "desc": "compiler flag: -fvpt", 
      "sort": 300, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }, 
    "##zero-initialized-in-bss": {
      "can_omit": "yes", 
      "choice": [
        "-fzero-initialized-in-bss", 
        "-fno-zero-initialized-in-bss"
      ], 
      "default": "", 
      "desc": "compiler flag: -fno-zero-initialized-in-bss", 
      "sort": 4600, 
      "tags": [
        "basic", 
        "boolean", 
        "optimization"
      ], 
      "type": "text"
    }
  }
}
